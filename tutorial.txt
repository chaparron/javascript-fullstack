INSTALACIÓN Y CONFIGURACIÓN
Fazt code  -> https://www.youtube.com/watch?v=IR5FXX7a_rM&list=PLo5lAe9kQrwq7n_REwpZdfggPCBW2ggnh&index=2

necesitamos node para el proyecto que se instala facil con la terminal

creamos la carpeta y la arrastramos al editor

creamos un directorio para el backend y otro para el frontend

abrimos la terminal dentro del editor

creamos el package.json con npm init -y

instalamos el framework express con algunas extensiones

	npm i express mongoose morgan multer dotenv cross-env cors
	-express	framework mas minimalista
	-mongoose	módulo para conectarnos a la bbdd
	-morgan 	para ver las peticiones que van llegando al servidor
	-multer		para subir imagenes al servidor sin tener que escribir todo el codigo
	-dotenv		para trabajar con las variables de entorno (guardar contraseñas y que no esten en el código)
	-cross-env	para definir en que entorno estamos
	-cors		para utilizar dos servidores

Si no se hace solo en package.json añadimos un array de las depencias que hemos creado
	,	
	"dependencies":{
	"cors": "2.8.5",
	"cross-env": "6.0.3",
	...
	},

cremaos dentro del backend una carpeta para modelos y otra para las rutas "models" y "routes"

También dentro del backend un archivo database.js y otro index.js

instalamos el módulo fs-extra para no tener que usar callbacks ya que asi se pueden usar promesas (pudiendo utilizar async away)
	npm i fs-extra


empezamos trabajo en el index
	exportamos el modulo de express y lo guardamos en una constante
		const express =  requiere('express)';
	inicializamos express y lo guardamos en una constante que será la app del servidor
		//Initializations
		const app = express(); 
	inciamos el servidor
		//Start the server
		app.listen()
	necesitamos un puerto para iniciar el servidor por lo que encima de la linea anterior definimos el puerto
		//Settings
		app.set('port', 3000);
	como ahora sí tenemos definido el puerto en la variable port la añadimos a app.listen
		app.listen(app.get('port'));
	una vez inicia el servidor definimos lo que haremos al iniciar
		app.listen(app.get('port), () => {
			console.log('Server on port, app.get('port'));
		})

ejecutamos en la consola el index del backend para comprovar que todo ha salido bien
	node backend/index.js  -->Debería responder Server on port 3000

para navegar en nuestra app hay que entrar en localhost:3000, pero de momento no hemos definido direcciones y nos devolverá cannot get /  lo que significa que el exprés está bien configurado


https://www.youtube.com/watch?v=VOx3iON96ew&list=PLo5lAe9kQrwq7n_REwpZdfggPCBW2ggnh&index=3
UILIZAR EL RESTO DE MODULOS Y CONFIGURAMOS SERVIDOR
	
requerimos morgan y lo guardamos en una constante
	const morgan = require('express');

en una nueva sección (Middlewares) utilizamos el módulo morgan como una función en modo dev
	//Middlewares
	app.use(morgan('dev'));

reiniciamos el servidor con ctrl c en la terminal
instalamos modulo nodemon con npm i nodemon -D (para hacer más faciles los reinicios del servidor) con -D al final lo instalamos como dependencia de desarrollo para que no se exporte luego con el proyecto
arrancamos el servidor con nodemon en vez de node ya que ahora está instalado
	npx nodemon backend/index.js  -> utilizamos npx ya que la instalacion de nodemon no ha sido local
si no nos funciona (no existe npx) instalamos npx con la terminal en teoria viene directamente con las últimas versiones de npm pero node aún no trae las últimas
	sudo npm i -g npx
para ahorrarnos escribir la ruta todo el rato, podemos ir a scripts dentro de package.json borramos el test y añadimos
	"dev": "nodemon backend/index.js" 
ahora podremos arrancar nodemon escribiendo en consola
	npm run dev

Con morgan ahora podemos entrar en el navegador localhost:3000 y veremos en consola las peticiones, en nuestro caso:
	GET / 404 4.960 ms - 139
	ha habido una peticion GET al root, codigo 404 ha mandado el servidor, ms de respuesta y peso de la respuesta

requerimos y guardamos en una constante multer
	const multer = require('multer')

usamos multer en middlewares
	app.use(multer());

Para poder usar multer hay que configurarlo antes (en la linea anterior del use multer)
	multer.diskStorage({
		destination: 'public/uploads'  //directorio donde se guardaran las imagenes
		})	
	para que entienda en que directorio esta hay que requerir path
		const path = require('path');		
	en destination habría que usar path y __dirname (básico de node es el directorio actual) si no está la carpeta la crea
		destination: path.join(__dirname, 'public/uploads')
	añadimos también filename al array de diskStorage que es una función
		filename(req,file,cb){
			cb(null,new Date().getTime() + path.extname(file.originalname)); );
		}
		** newDate().getTime() para nombre de archivo
		** pa th.extname(file.originalname) para la extension
	lo guardamos todo en una constante
		const storage = multer.diskStorage({
			destination: path.join(__dirname, 'public/uploads'),
			filename(req,file,cb){
				cb(null, new Date().getTime() + path.extname(file.originalname));
				}
			})
para saber lo que devuelve un javascript abrimos una consola nueva y ponemos "node" (interprete directo sin porgrama, para probar cosas de javascript, por ejemplo new Date().getTime() que lo hemos utilizado para poner un nombre aleatorio en filename

ahora en multer ya podemos pasar la configuración
	app.use(multer({storage}).single('image'));
	**single('Image') para decir que subiremos una sola imagen

añadimos el middleware de express para interpretar los formularios en json urlencoded
	app.use(express.urlencoded({extended:false}));
como será una app de una sola página que no recargará añadimos json para entender ajax
	app.use(express.json());

CREAMOS LAS RUTAS
https://www.youtube.com/watch?v=0Clbi-8EiLw&list=PLo5lAe9kQrwq7n_REwpZdfggPCBW2ggnh&index=4

Creamos un archivo dentro de routes "books.js"
en el archivo books.js requerimos express para usar el método router , guardarlo en una constante y exportarla
	const {Router} = require('express');
	const router = Router();
	module.exports = router;

-->Para enroutar la app utilizaremos:
-->	dentro de nuestro index creamos otra sección
-->		//Routes
-->		app.use(require('./routes/books'));
-->
-->	y en books antes de exportar la variable creamos la ruta
-->		router.get('/',(req, res) => res.send('Hello world'));
Como haremos una API tenemos que mandar sólo datos en jsons por lo tanto usaremos
	app.use('/api/books', require('./routes/books'));
	router.get('/',(req, res) => res.json(text:'Hello world'));

Las carpetas de node son privadas por defecto para dar seguridad a los archivos, para dar acceso al navegador en index colocamos otra seccion
	//Static files
	app.use(express.static(path.join(__dirname, 'public')));

-->Dentro de public ya podemos crear un index que ahora si podrá ver el navegador en localhost:3000/index.html (sin index.html también entrará por defecto ahi)
-->podemos también crear un css y linkarla con     <link rel="stylesheet" href="/index.css">
-->No los creamos porque lo haremos más adelante desde webpack en el frontend y ya se convertirá en html, css y js


CONFIGURAMOS LA BBDD CON MONGO
https://www.youtube.com/watch?v=NsiGIt9HVBM

requerimos mongodb

en el archivo de database.js requerimos mongoose y nos conectamos
	const mongoose = require('mongoose');
	mongoose.connect(); 

en la consola arrancamos el proyecto fazt dice sudo service mongod start, en realidad ha funcionado sudo mongod
--> si sale error 100 es porque falta la carpeta /data/db la creamos (sudo mkdir -p /data/db) y nos aserguramos que tenga permisos para escritura (sudo chown -R `id -un` /data/db)
--> si sale error 48 es porque el puerto que usa mongo esta ocupado y lo tenemos que arrancar con otro puerto (mongod --port 27018)

en mongoose connect usamos el protocolo mongodb para conectarnos al localhost y asignamos nombre a la bbdd (cuando guardemos datos la creara) y añadimos la configuración (de momento guardamos la cadena directamente, en realidad hay que hacerlo con variables de entorno por seguridad)
	mongoose.connect('mongodb://localhost/javascriptdb',{
		useNewUrlParser:true
    		useUnifiedTopology: true, 
	})
		.then(db=>console.log('DB is connected')) //si todo va bien
		.catch(err =>console.error(err)); //si lanza un error

en inicializaciones requerimos el archivo database
	require('./database');

y si todo ha ido bien por consola deberiamos ver DB is connected en la terminal y ya podemos guardar datos

para definir el modelo de nuestra app iremos a modelos y creamos un archivo books.js y así decimos que datos guardamos de cada libro
primero requerimos mongoose, sólo necesitamos Schema y model
	const {Schema, model} = require('mongoose');

Creamos un Schema que servirá para compararse con un nuevo libro cuando lo creemos 

const BookSchema = new Schema({
	title: {type: String, required: true},
	author: {type: String, required: true},
	isbn: {type: String, required: true},
	imagePath: {type: String}, // la ruta de la imagen para hacerlo más eficiente, de momento no lo requerimos para configurarlo más fácil cuándo hagamos posts iniciales
	created_at: {type: Date, default: Date.now}
	})

exportamos el modelo, que requiere un nombre y un schema
	module.exports = model('Book', BookSchema);

CAMBIAR VARIABLES DE ENTORNO
https://www.youtube.com/watch?v=gTZmRwzzDlM

en database eliminamos la cadena para poner todas las variables en el documento .env que lo creamos en la carpeta raíz del proyecto
creamos la variable MONGODB_URI=mongodb://localhost/javascriptdb
definimos que estamos en entorno de desarrollo con dotenv y que estamos usando el .env en el index, antes de que empiece todo el codigo
	require('dotenv').config();
para asegurarnos que esta bien configurado, en database.js comentamos en database el mongoose.connect y hacemos un console.log de la variable para ver di nos muestra la cadena
	cnosole.log(process.env.MONGODB_URI) --> en consola mongodb://localhost/javascriptdb
Una vez sabemos que está bien configurado lo añadimos al mongoose.connect
	mongoose.connect(process.env.MONGODB_URI,{
    		useUnifiedTopology: true,
    		useNewUrlParser: true,
		})
    		.then(db=>console.log('DB is connected')) //si todo va bien
    		.catch(err =>console.error(err)); //si lanza un error
para que las variables y configuraciones no sean accesibles en git, añadimos el .env al .gitignore que lo creamos en la raíz y de paso el node_modules

Se pueden crear las variables que queramos en el .env y luego las podremos usar con el process.env.variable por ejemplo el puerto
	PORT = 4000  --> ¡No llevan ; al final de las declaraciones de variables!
y la usamos en //settings del index.js sustituyendo al 3000 que teniamos, ahora en consola veremos el server en port 4000
	lo suyo es hacer app.set('port',process.env.PORT || 3000); entonces si no tenemos un puerto definido usaremos el "3000" servicios donde desplegamos la app nos dan un puerto definido y así ya estamos validando para cuando nos den el puerto definido
	de momento eliminamos la variable port en el .env, solo era para comprovar que cuando nos lo den funcionará
con cross_env definimos el despliegue de la app en desarollo y en produccion en los scripts del package.json
	"dev": "cross-env NODE_ENV=development nodemon backend/index.js",
	"start":"cross-env NODE_ENV=production node backend/index.js"
ahora si en el index hacemos un console.log del NODE_ENV, nos dirá en que estado se encuentra el proyecto development/production
	console.log(process.env.NODE_ENV);
		-->npm run dev mostrará development
		-->npm start mostrará production   (no necesitamos el run porque start es una de las ordenes básicas)
al principio del index.js creamos un condicional para que requiera el dotenv sólo cuando estemos en desarrollo
	if(proces.env.NODE_ENV === 'development'){
		require('dotenv').config();
	}
ahora sólo nos funcionará en desarrollo, ya que si le damos a npm start y se pone en producción, no usará dotenv, no leerá el archivo .env y por lo tanto no tendrá las variables
cuando despleguemos, nos dejarán definir las variables desde una interfaz

EMPEZAMOS A DISEÑAR LA RESTAPI
https://www.youtube.com/watch?v=c4mzLwZNCgQ

utilizaremos postman para desarrollo, sirve para poder enviar peticiones get, post etc sin tener la interfaz creada, una vez funcionando crearemos esta interfaz
en el index estamos indicando en //routes "app.use('/api/books', require('./routes/books'));" lo que quiere decir que en el navegador al poner api/books iremos al routes/books
	de momento estamos enviando un hello world a través de "router.get('/',(req,res)=>res.json({text:'Hello world'}));" esto tenemos que cambiarlo para enviar lo datos desde mongodb
	requerimos el modelo de los libros y lo guardamos en una constante
		const Book = require('../models/books');
	eliminamos el hello world y hacemos una consulta de todos los books en mongodb
		router.get('/',(req, res) => {
			Book.find();    // busca y devuelve todos los libros que tenemos en la bbdd
		});
	como es una consulta asíncrona debemos usar el async/await creando una variable y devolviendola después del await con el json
		router.get('/',async (req, res) => {
			const books = await Book.find();    // busca y devuelve todos los libros que tenemos en la bbdd
			res.json(books);
		});
	ahora ya nos debe devolver un arreglo vacío al entrar al localhost:3000/api/books ya que no tenemos ningun dato guardado en javascriptdb
Para guardar en la bbdd utilizaremos postman, enviando un post con un json con los datos que queramos almacenar, pero primero crearemos la ruta con el metodo post y dentro para empezar mostraremos los datos
	router.post('/',async (req,res)=>{
		console.log(req.body);
		res.send('recived');
	});
	entonces cuando con postman entremos a la ruta pero con post veremos un recived y en consola vemos el objeto que le hemos enviado ('hasta ahora un objeto vacío')
	vamos a headers en postman y en headers vamos a pooner en key content-type y en value application/json y en el body seleccionamos raw y enviamos el json {"text": "Hello world"}
entonces nos leerá todos los datos que le pongamos, como habiamos pedido en la template books title, author y isbn (porque fecha se autocompletará) vamos a mandar esos datos
	{"title": "I Robot", "author":"Isaac Asimov", "isbn": "asdf34f34f34"}
como nos llegan por consola quiere decir que están bien enviados, los capturamos y los guardamos
	router.post('/',async (req,res)=>{
		const {title,author,isbn} = req.body;
		const newBook = new Book({title, author,isbn});
		console.log(newBook);
		res.send('recived');
	});	
si reenviamos el post vemos que ahora por consola nos sale el mismo libro pero ahora con los datos de _id que nos los crea mongo y el created_at: que en el modelo de libro hicimos que se hiciese solo
	para que en vez de mostrarse por consola se guarde usaremos newBook.save() con el await delante ya que es asincrono
	y la respuesta que enviaremos sera un json con el mensaje de llibro guardado
		router.post('/', async(req,res)=>{
		    const {title, author, isbn} = (req.body);
		    const newBook = new Book({title, author, isbn});
		    await newBook.save();
		    res.json({message:'book saved'});
		});
ahora si enviamos lo mismo con postman nos saldrá el json con el message book saved y en la consola no debe dar error, si entramos en el navegador ya debemos ver el json con los datos que ya deberian estar gusardados.
podemos guardar tantos como queramos con el método post y con el método get veremos el listado
ahora para eliminar crearemos la ruta con el metodo delete, pasando en la ruta el id del libro que quiro eliminar (ahora copiamos en postman el id al final de la rutam luego ya lo haremos desde la interfaz)
	en las rutas creamos la ruta con el método delete y seleccionamos y eliminamos con el método findByIdAndDelete
		router.delete('/:id', async (req, res) => {
			const book = await Book.findByIdAndDelete(req.params.id);
			console.log(book); //para ver por consola el libro que hemos eliminado
			res.send('deleted');
		});
		--> Mejor mandar el deleted con json res.json({message: 'Book deleted'});
		--> No hace falta el console.log para mostrar por pantalla el libro creado
		--> No hace falta guardar en una variable el book (de hecho solo era para el console.log
	podemos comprobar como se elimina con el navegador en localhost:3000/api/books

NOS ENFOCAMOS EN EL FRONTEND
https://www.youtube.com/watch?v=z3OyqCE_J64
podemos cerrar el servidor y centrarnos en la carpeta del frontend, lo haremos con webpack, que coge todos los archivos y los empaqueta (todo tipo de archivo lo acaba convirtiendo a css, js, jpg o png) reduciendo el peso y uniendo todos los archivos en uno etc "optimiza"
	npm i webpack webpack-cli html-webpack-plugin css-loader style-loader mini-css-extract-plugin webpack-dev-server timeago.js -D
		webpack-cli	
		html-webpack-plugin	para que sepa como mover los archivos html
		css-loader		para cargar css dentro de js
		style-loader
		mini-css-extract-plugin	minificar el css
		webpack-dev-server	nos permite trabajar en desarrollo
		timeago.js		para poder poner fechas en base a hace tres horas
		-D para instalar las dependencias en modo desarrollo, luego ya convertiremos todo en codigo al public con el webpack
mientras todo se está instalando podemos ir creando en la carpeta del frontend creamos el index.html, app.js, UI.js y las carpetas styles, models y services
Ahora deberíamos tener todos los módulos en dev dependencies dentro del package.json

https://www.youtube.com/watch?v=gtkdxLgHIhg
CONFIGURAR WEBPACK
primero creamos un archivo en la raiz con el nombre webpack.config.js
queremos que mueva el código origen a public (lo guardaremos en un archivo que llamaremos bundle.js), requerimos path primero para poder poner las rutas
	const path = require('path');
	module.exports = {
		entry: './frontend/app.js',
		output: {
			path: path.join(__dirname, 'backend/public'),
		filename: 'bundle.js'
		}
	}
	-->comprovamos que funciona creando un alert en el app.js del frontend
		alert('works!');
	--> npx webpack en consola y vemos como se generá el archivo bundle.js y es un archivo de una linea comprimido
		si en config del webpack escribimos algo mal nos va a decir que no reconoce los comandos en consola
	como el código generado se guarda en public podemos acceder a el corriendo el servidor con npm run dev en consola, pero si vamos a nuestra dirección (localhost:3000/bundle.js) solo veremos el código, necesitamos en config utilizar también un html
		usamos html-webpack-plugin
			const HtmlWebpackPlugin = require('html-webpack-plugin');
		dentro del export de la config de webpack añadimos la sección plugins y añadimos HtmlWebpackPlugin con su configuración en un array
			const path = require('path');
			const HtmlWebpackPlugin = require('html-webpack-plugin');
				module.exports = {
					entry: './frontend/app.js',
					output: {
						path: path.join(__dirname, 'backend/public'),
						filename: 'js/bundle.js'
						},
					plugins: [
						new HtmlWebpackPlugin({
							template: './frontend/index.html'
						})
					]
				};
		--> si corremos webpack de nuevo npx webpack veremos como modifica también el index public del backend
		--> como por defecto localhost:3000 lee el index y este con webpack esta enlazado al bundle, nos leerá directamente la aplicación y nos saldrá el alert
		--> podemos alterar el código del index del frontend, que luego webpack ya lo modificará para el backend con el script y será el que se vez por el navegador
		--> a la configuración del Htmlwebpackplugin le añadiremos minify con sus características para que nos comprima el código, lo añadimos dentro del array después de template
			minify:{
				collapseWhitespace: true,
				removeComments: true,
				removeRedundanttributes: true,
				removeScriptTypeAttributes: true,
				removeStyleLinkAttributes: true,
				useShortDoctype: true
				}
		--> Para comprovar que minifica podemos crear una estructura básica en el frontend, correr webpack y mirar el código minificado en el backend
	ya tenemos html y js ahora dentro de la config del webpack usaremos style-loader y css-loader, antes de plugins añadimos:
		module: {
			rules:[
				{
				test: /\.css/,
				use: [
					'style-loader',
					'css-loader'
					]
				}
			]
		},
	-->entonces en el frontend creamos una carpeta styles y dentro creamos el style.css con algunos estilos.
		--> como funciona todo a base de js, requerimos el css con el app.js y no con el index
			require('./styles/styles.css');
		--> nos coloca los estilos de css en el app.js del backend y en produccion no nos interesa
		debemos indicar que estamos en producción con cross-env

			cross-env NODE_ENV=production webpack   --> lo metemos en un script llamado build dentro del packaje json 
		en la configuración del webpack requeriremos el modulo mini-css-extract-plugin y lo usaremos si no estamos en producción, para eso guardamos en una constante un true cuando el NODE_ENV sea diferente a production
			const MiniCssEstractPlugin = require('mini-css-extract-plugin');
			const devMode = process.env.NODE_ENV !== 'production';
			use: [
				devMode? 'style-loader: MiniCssExtractPlugin.loader,  // si devMode true (no estamos en producción) usara style-loader, si estamos en producción usará MiniCssExtractPlugin
			por último en los plugins de webpack config añadimos y configuramos MiniCssExtractPlugin
				new MiniCssExtractPlugin({
					filename: 'css/bundle.css'
				})
	añadimos al final del module exports una linea que ponga " devtool: 'source-map'" para que cuando haya un error nos diga en que linea ha sido

Ahora ya se están generando las carpetas en el backend desde el frontend, cada una en su sitio y dependiendo de si estamos en desarroyo o producción
	modificamos el script "dev" para que no se reinicie cuando modificamos algo del frontend, añadimos  --ignore frontend
--> podemos eliminar la carpeta public del backend que se nos generará (si está corriendo el servidor) con multer al guardar el index.js del servidor
--> del frontend podemos eliminar el app.js y los css ya que estaban para comprovar que se iba generando todo bien, ahora crearemos los buenos.


https://www.youtube.com/watch?v=mX6NwOwTlzk
INSTALAMOS MÓDULOS PARA INSTALAR UNA INTERFAZ
-->en styles del frontend, cambiamos el nombre del styles.css a app.css
-->en app.js debemos requerir el css "require('./styles/app.css');" o con emmascript más abreviado "import './styles/app.css';
empezamos con un framework de css, bootstrap, copiamos el css y lo metemos debajos del title en el index.html debajo del título
añadimos el cdn dentro del github de animate css también en el head del index.html
creamos dentro del body una navegación sencilla de bootstrap
	    <nav class="navbar navbar-dark bg-dark" >
		<div class="container">
		    <a href="/" class="navbar-brand">Books APP</a>
		</div>
	    </nav>
compilamos el código con npm run build y comprovamos que se nos generan en public del frontend los archivos en sus carpetas js y css y el html
para no tener que estar poniendo todo el rato el npm run build generamos otro script que nos tenga el webpack-dev-server activo
	"server-dev":"webpack-dev-server"
nos fijamos en que servidor nos lo crea y podemos entrar con el localhost:**** en mi caso ha sido 8080 y si hacemos cambios se verán en el navegador
	-->usaremos entonces el "8080" para el desarrollo de la interfaz y el 3000 para los datos, que no se actualizará sin build
tenemos el aviso en consola de que no hemos configurado el modo para webpack, aunque nos explica bien como hacerlo	
	**WARNING in configuration
	The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
	You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/
		-->en la configuración del webpack ponemos mode:'development', en el array de module.exports
creamos la interfaz, en nuestro caso:

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Computer Products</title>
  <link rel="stylesheet" href="https://bootswatch.com/4/cosmo/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css">

</head>

<body>

  <!-- NAVIGATION -->
  <nav class="navbar navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/">Books App</a>
    </div>
  </nav>

  <div class="container p-4" id="app">
    <div class="row">
      <div class="col-md-4">

        <form id="book-form" class="card card-body">
          <div class="form-group">
            <input type="text" id="title" class="form-control" placeholder="Book Title" autofocus>
          </div>
          <div class="form-group">
            <input type="text" id="author" class="form-control" placeholder="Author">
          </div>
          <div class="form-group">
            <input type="text" id="isbn" class="form-control" placeholder="ISBN">
          </div>
          <div class="input-group mb-3">
              <div class="custom-file">
                <input type="file" class="custom-file-input" id="image" required>
                <label class="custom-file-label" for="image" aria-describedby="inputGroupFileAddon02">Choose Image</label>
              </div>
            </div>
          <button type="Submit" class="btn btn-primary">
            Save Book
          </button>
        </form>
      </div>

      <div class="col-md-8" id="books-cards">
      </div>

    </div>

  </div>

</body>

</html>

Para personalizar nuestro bootstrap, vamos a bootswatch.com, elegimos el tema que nos guste, le damos a Ctrl+download y copiamos el enlace, que lo pondremos en el href de una etiqueta link y eliminaremos el enlae anterior a bootstrap

https://www.youtube.com/watch?v=hO9993I520E&t=22s
CAPTURAMOS EVENTOS

